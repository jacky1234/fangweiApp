package com.jacky.labeauty.support.dao.generate;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jacky.labeauty.support.dao.module.Preference;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PREFERENCE".
*/
public class PreferenceDao extends AbstractDao<Preference, Long> {

    public static final String TABLENAME = "PREFERENCE";

    /**
     * Properties of entity Preference.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Index = new Property(0, long.class, "index", true, "_id");
        public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
    }


    public PreferenceDao(DaoConfig config) {
        super(config);
    }
    
    public PreferenceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PREFERENCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: index
                "\"VALUE\" TEXT);"); // 1: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PREFERENCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Preference entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIndex());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Preference entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIndex());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Preference readEntity(Cursor cursor, int offset) {
        Preference entity = new Preference( //
            cursor.getLong(offset + 0), // index
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Preference entity, int offset) {
        entity.setIndex(cursor.getLong(offset + 0));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Preference entity, long rowId) {
        entity.setIndex(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Preference entity) {
        if(entity != null) {
            return entity.getIndex();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Preference entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
